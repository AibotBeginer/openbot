syntax = "proto3";

package openbot.simulation;

import "openbot/common_msgs/simulation_msgs/agent.proto";
import "openbot/common_msgs/simulation_msgs/grading_metric.proto";

import "openbot/common_msgs/perception_msgs/traffic_light_detection.proto";
import "openbot/common_msgs/planning_msgs/pad_msg.proto";
import "openbot/common_msgs/routing_msgs/routing.proto";

message FuzzingConfig {}

message DriveActionConfig {
  openbot.planning.PadMessage.DrivingAction drive_action = 1;
  double trigger_time = 2;
}

message Scenario {
  string name = 1;
  string description = 2;

  message Point {
    double x = 1;
    double y = 2;
    double heading = 3;
    // TODO: add lane-id and ratio.
  }
  // Only use in WorldSim.
  Point start = 3;
  Point end = 4;
  Point parking_point = 5;

  // Only use in LogSim
  repeated string origin_log_file_path = 6;
  double log_file_start_time = 7;
  double log_file_end_time = 8;

  // This is used if 1) the logsim bag does not contain one.
  // 2) the worldsim has different start pose for routing and ego car.
  openbot.routing.RoutingRequest routing_request = 9;

  // map dir, only used in offline env
  string map_dir = 10;

  // metric specific to the scenario.
  GradingConfig grade_config = 11;

  // agent type
  repeated AgentConfig agent = 12;
  // a sequence of driving actions
  repeated DriveActionConfig drive_action_config = 13;
  FuzzingConfig fuzzing_config = 14;

  // Only use in WorldSim. Max time before stop running the scenario.
  int32 simulator_time = 15;

  // Initial velocity and acceleration of the main vehicle
  double start_velocity = 16;
  double start_acceleration = 17;

  // file path to its base metric config
  string base_grade_config_file = 18;

  // Traffic light detection distance.
  double detect_distance = 19;

  enum DefaultLightBehavior {
    ALWAYS_GREEN = 0;
    CYCLICAL = 1;  // Traffic lights change by red -> green -> yellow cycles.
  }
  DefaultLightBehavior default_light_behavior = 20;
  double red_time = 21;
  double green_time = 22;
  double yellow_time = 23;

  message TL {
    string id = 1;
    message Location {
      double x = 1;
      double y = 2;
      double z = 3;
    }
    Location location = 2;

    enum TriggerType {
      NA = 0;  // The traffic light will stay in initial_state.
      DISTANCE = 1;
      TIME = 2;
    }
    TriggerType trigger_type = 3;
    // Trigger Distance or Trigger Time
    double trigger_value = 4;

    message State {
      openbot.perception.TrafficLight.Color color = 1;
      bool blink = 2;
      double keep_time = 3;
    }
    State initial_state = 5;
    repeated State state_group = 6;
  }
  // The overriden traffic lights behavior
  repeated TL traffic_lights = 24;

  // The scenario should be run in one of the modes.
  enum Mode {
    WORLDSIM = 0;
    LOGSIM = 1;
    LOGSIM_CONTROL = 2;
    LOGSIM_PERCEPTION = 3;
  }
  Mode mode = 25;

  repeated string select_default_metric = 26;
  repeated string deselect_default_metric = 27;

  // The backtrack time to start running perfect_control once a disengage is
  // detected.
  double backtrack_time = 28;

  // Only use in LogSim
  string vehicle = 29;

  // Only use in worldsim for special scenario conf use multi agent server
  bool traffic_flow = 30;
}
