syntax = "proto3";

package openbot.simulation;

import "openbot/common_msgs/map_msgs/map_geometry.proto";

// Next-id: 29
message Condition {
  oneof condition {
    LogicalCondition logical_condition = 1;
    SpeedCondition speed_condition = 2;
    AccelerationCondition acceleration_condition = 3;
    JerkCondition jerk_condition = 4;
    ObjectOverlapCondition object_overlap_condition = 5;
    RegionOverlapCondition region_overlap_condition = 6;
    RegionOverlapLWCondition region_overlap_lw_condition = 7;
    SpinCondition spin_condition = 8;
    OnRoadCondition on_road_condition = 9;
    RunRedLightCondition run_red_light_condition = 10;
    ChangeLaneAtJunctionCondition change_lane_at_junction_condition = 11;
    RoutingCondition routing_condition = 12;
    CrosswalkYieldCondition crosswalk_yield_condition = 13;
    AbnormalStopCondition abnormal_stop_condition = 14;
    BrakeTapCondition brake_tap_condition = 15;
    RunStopSignCondition run_stop_sign_condition = 16;
    CheckpointCondition checkpoint_condition = 17;
    DistToEndCondition dist_to_end_condition = 18;
    DistToLaneCenterCondition dist_to_lane_center_condition = 19;
    CrosswalkStopCondition crosswalk_stop_condition = 20;
    RedLightStopCondition red_light_stop_condition = 21;
    SpeedbumpLimitCondition speedbump_limit_condition = 22;
    WorkingZoneAvoidLimitCondition working_zone_avoid_limit_condition = 23;
    LimitedTimeParkingCondition limited_time_parking_condition = 24;
    FollowAndBypassCondition follow_and_bypass_condition = 25;
    ObstacleBypassCondition obstacle_bypass_condition = 26;
    CentripetalAccelerationCondition centripetal_acceleration_condition = 27;
    TimeLimitCondition time_limit_condition = 28;
    AntiCheatingCondition anti_cheating_condition = 29;
    KeyPointCondition key_point_condition = 30;
  }

  GradePlanning grade_planning = 100;
}

message GradePlanning {
  // any negative integer: grade all the planning points,
  // 0: do not grade any planning point,
  // any positive integer k: grade planning points within k sec.
  sint32 duration = 1;
  // Whether to search for a perception obstacle frame that is
  // close enough in time to the planning point.
  bool update_obstacles = 2;
  // Whether to evaluate planning points in a certain range.
  bool use_planning_as_history = 3;
}

message LogicalCondition {
  enum OperatorType {
    UNKNOWN = 0;
    NOT = 1;
    AND = 2;
    OR = 3;
    IMPLY = 4;
    XOR = 5;
  }
  OperatorType operator_type = 1;
  repeated Condition sub_condition = 2;
}

message SpeedCondition {
  string name = 1;
  double min_speed = 2;
  double max_speed = 3;
  bool use_score = 4;
  double single_deduction = 5;
}

message CentripetalAccelerationCondition {
  // 向心加速度限制
  string name = 1;
  double max_centripetal_acceleration = 2;
  bool use_score = 3;
  double single_deduction = 4;
}

message AccelerationCondition {
  string name = 1;
  double min_acceleration = 2;
  double max_acceleration = 3;
  bool use_score = 4;
  double single_deduction = 5;
}

message JerkCondition {
  string name = 1;
  double min_jerk = 2;
  double max_jerk = 3;
}

message SpinCondition {
  string name = 1;
  double min_spin = 2;
  double max_spin = 3;
}

message ObjectOverlapCondition {
  enum DirectionType {
    EXCLUDE_BACK = 0;
    INCLUDE_BACK = 1;
  }

  string source_object_ids = 1;
  string target_object_ids = 2;
  double distance = 3;
  // the relative direction from the source object
  DirectionType direction = 4;
  repeated string ignore_object_ids = 5;
  bool use_score = 6;
}

message RegionOverlapCondition {
  string object_ids = 1;

  // Coordinates of region corners. e.g. x1, y1, x2, y2, etc.
  repeated double region_corner_xy = 2 [packed = true];

  // True if the condition requires the region fully containing the object.
  bool require_fully_contain = 3;

  // Specify if the polygon has certain pre-defined heading.
  double heading = 4;
  bool use_score = 5;
}

message RegionOverlapLWCondition {
  string object_ids = 1;

  double x = 2;
  double y = 3;

  double length = 4;
  double width = 5;

  // True if the condition requires the region fully containing the object.
  bool require_fully_contain = 6;
  bool use_score = 7;
}

message OnRoadCondition {
  // True if evaluate based on road boundary rather than lane boundary.
  bool use_road_boundary = 1;
  bool use_score = 2;
}

message RunRedLightCondition {
  bool use_score = 1;
}

message RedLightStopCondition {
  double min_distance = 1;
  double max_distance = 2;
  bool use_score = 3;
  double single_deduction = 4;
}

message ChangeLaneAtJunctionCondition {}

message RoutingCondition {}

message CrosswalkYieldCondition {}

message CrosswalkStopCondition {
  double min_distance = 1;
  double max_distance = 2;
  bool use_score = 3;
  double single_deduction = 4;
}

message AbnormalStopCondition {
  double duration = 1;
  double distance = 2;
  double x = 3;
  double y = 4;
}

message BrakeTapCondition {
  double min_duration = 1;
  double max_duration = 2;
}

message RunStopSignCondition {
  double distance = 1;
}

message CheckpointCondition {
  // Each checkpoint sub-condition needs to be true at least once.
  repeated Condition checkpoint = 1;
}

message DistToEndCondition {}

message DistToLaneCenterCondition {}

message TimeLimitCondition {
  // time limitation, in seconds
  double timeout = 1;
  bool use_score = 2;
}

message SpeedbumpLimitCondition {
  // change speedbump from line segment to rectangle which length = line segment
  // length
  double speedbump_half_width = 1;
  double max_speed = 2;
  // (adc_speed - max_speed)/deduction_speed_unit 来计算扣分次数
  double deduction_speed_unit = 3;
  bool use_score = 4;
  double single_deduction = 5;
}

// 区别：和regionOverlap希望包含这个polygon或者有重叠的情况
// 施工区域：希望不包含这个polygon，同时含限时+限速
// 忽略限速和限时，将变成一个判断no overlap的情况
// 可以理解为：regionOverlap反向
message WorkingZoneAvoidLimitCondition {
  // adc should avoid working zone
  repeated openbot.hdmap.Polygon working_zone = 1;
  double max_speed = 2;
  // whole area used for judge if car enter this area
  // if enter, then check if enter working_zone
  // this field required
  openbot.hdmap.Polygon whole_area = 3;
  bool use_score = 4;
  // 单帧扣分系数，应该与位移及检测帧率成负相关，与总分值成正相关
  // 扣分公式为sum((vx/vl-1)^(vx/vl)*single_deduction)
  //  vx 为当前帧速度
  //  vl 即 max_speed, 最大限速
  // 具体的系数公式待定，以下仅举例说明，由于公式不明确，暂时以一个
  // 定值参数的形式从配置传入
  // eg: 满分为120的情况下，频率100（间隔0.01s），距离600m的情况下
  // single_deduction = (120 * k) / (600 * 100), k 为常数
  // k为30则single_deduction为0.06，则通过扣分公式大概可得
  // 平均速度超过60%之后可将分数扣完
  // k为40则single_deduction为0.08，则通过扣分公式大概可得
  // 平均速度超过43%之后可将分数扣完
  // 调整k使用single_deduction可以让速度超过一定比例后将分数扣完
  double single_deduction = 5;
}

message LimitedTimeParkingCondition {
  openbot.hdmap.Polygon parking_lot = 1;
  // 转变time to 次数
  // eg: 90s内限时停车，频率10ms刷新一次 9000次
  bool use_score = 2;
  double single_deduction = 3;
}

message FollowAndBypassCondition {
  openbot.hdmap.Polygon test_range = 1;
  double divide_speed = 2;  // 3
  string obstacle_id = 3;                   // 1372
  openbot.hdmap.LineSegment end_line = 4;
  bool use_score = 5;
  // no single deduction only 100 or 0
}

message ObstacleBypassCondition {
  openbot.hdmap.Polygon test_range = 1;
  string obstacle_id = 2;
  double min_lateral_distance = 3;
  double max_speed = 4;
  bool use_score = 5;
  double single_deduction = 6;
}

message AntiCheatingCondition {
  bool use_score = 1;
}

message KeyPoint {
  double x = 1;
  double y = 2;
  double z = 3;
  double radius = 4;
}

// 这个条件是针对高速足跳变所设计，通过设置道路的检查点，看车辆是否保持合理的运
// 行轨迹
// TODO: 在解析评测配置的处增加根据路线生成检查点的逻辑
message KeyPointCondition {
  bool use_score = 1;
  bool in_order = 2;
  double radius = 3;
  // 检查点，每个点都经过结果判定才会为真
  repeated KeyPoint point = 4;
}
