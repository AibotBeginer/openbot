syntax = "proto3";

package openbot.canbus;

import "openbot/common_msgs/basic_msgs/vehicle_id.proto";
import "openbot/common_msgs/chassis_msgs/chassis.proto";


message ChassisDetail {
  enum Type {
    QIRUI_EQ_15 = 0;
    CHANGAN_RUICHENG = 1;
  }
  Type car_type = 1;               // car type
  BasicInfo basic = 2;             // basic info
  Safety safety = 3;               // safety
  Gear gear = 4;                   // gear
  Ems ems = 5;                     // engine manager system
  Esp esp = 6;                     // Electronic Stability Program
  Gas gas = 7;                     // gas pedal
  Epb epb = 8;                     // Electronic parking brake
  Brake brake = 9;                 // brake pedal
  Deceleration deceleration = 10;  // deceleration
  VehicleSpd vehicle_spd = 11;     // vehicle speed
  Eps eps = 12;                    // Electronic Power Steering
  Light light = 13;                // Light
  Battery battery = 14;            // Battery info
  CheckResponseSignal check_response = 15;
  License license = 16;  // License info
  Surround surround = 17;                    // Surround information
  // Reserve fields for other vehicles
  openbot.common.VehicleID vehicle_id = 101;
}

// CheckResponseSignal
message CheckResponseSignal {
  bool is_eps_online = 1;   // byd:0x34C qirui:0x505
  bool is_epb_online = 2;   // byd:0x218
  bool is_esp_online = 3;   // byd:0x122 qirui:0x451
  bool is_vtog_online = 4;  // byd:0x242
  bool is_scu_online = 5;   // byd:0x35C
  bool is_switch_online = 6;  // byd:0x133
  bool is_vcu_online = 7;     //  qirui:0x400
}

// Battery
message Battery {
  double battery_percent = 1;  // unit:%, battery percentage left
  // lincoln fuellevel 72
  double fuel_level = 2;
}

// light
message Light {
  enum TurnLightType {
    TURN_LIGHT_OFF = 0;
    TURN_LEFT_ON = 1;
    TURN_RIGHT_ON = 2;
    TURN_LIGHT_ON = 3;
  }
  enum BeamLampType {
    BEAM_OFF = 0;
    HIGH_BEAM_ON = 1;
    LOW_BEAM_ON = 2;
  }
  enum LincolnLampType {
    BEAM_NULL = 0;
    BEAM_FLASH_TO_PASS = 1;
    BEAM_HIGH = 2;
    BEAM_INVALID = 3;
  }
  enum LincolnWiperType {
    WIPER_OFF = 0;
    WIPER_AUTO_OFF = 1;
    WIPER_OFF_MOVING = 2;
    WIPER_MANUAL_OFF = 3;
    WIPER_MANUAL_ON = 4;
    WIPER_MANUAL_LOW = 5;
    WIPER_MANUAL_HIGH = 6;
    WIPER_MIST_FLICK = 7;
    WIPER_WASH = 8;
    WIPER_AUTO_LOW = 9;
    WIPER_AUTO_HIGH = 10;
    WIPER_COURTESY_WIPE = 11;
    WIPER_AUTO_ADJUST = 12;
    WIPER_RESERVED = 13;
    WIPER_STALLED = 14;
    WIPER_NO_DATA = 15;
  }
  enum LincolnAmbientType {
    AMBIENT_DARK = 0;
    AMBIENT_LIGHT = 1;
    AMBIENT_TWILIGHT = 2;
    AMBIENT_TUNNEL_ON = 3;
    AMBIENT_TUNNEL_OFF = 4;
    AMBIENT_INVALID = 5;
    AMBIENT_NO_DATA = 7;
  }

  TurnLightType turn_light_type = 1;
  BeamLampType beam_lamp_type = 2;
  bool is_brake_lamp_on = 3;
  // byd switch 133
  bool is_auto_light = 4;
  int32 wiper_gear = 5;
  int32 lotion_gear = 6;
  bool is_horn_on = 7;

  // lincoln misc 69
  LincolnLampType lincoln_lamp_type = 8;
  LincolnWiperType lincoln_wiper = 9;
  LincolnAmbientType lincoln_ambient = 10;
}

// Electrical Power Steering
message Eps {
  enum Type {
    NOT_AVAILABLE = 0;
    READY = 1;
    ACTIVE = 2;
    INVALID = 3;
  }
  // changan: eps 2a0
  bool is_eps_fail = 1;
  // eps 2a0
  Type eps_control_state = 2;       // for changan to control steering
  double eps_driver_hand_torq = 3;  // unit:Nm

  bool is_steering_angle_valid = 4;
  double steering_angle = 5;      // unit:degree
  double steering_angle_spd = 6;  // unit:degree/s

  // byd sas 11f
  bool is_trimming_status = 7;
  bool is_calibration_status = 8;
  bool is_failure_status = 9;
  int32 allow_enter_autonomous_mode = 10;
  int32 current_driving_mode = 11;

  // lincoln steering 65
  double steering_angle_cmd = 12;
  double vehicle_speed = 13;
  double epas_torque = 14;
  bool steering_enabled = 15;
  bool driver_override = 16;
  bool driver_activity = 17;
  bool watchdog_fault = 18;
  bool channel_1_fault = 19;
  bool channel_2_fault = 20;
  bool calibration_fault = 21;
  bool connector_fault = 22;

  double timestamp_65 = 23;

  // lincoln version 7f
  int32 major_version = 24;
  int32 minor_version = 25;
  int32 build_number = 26;
}

message VehicleSpd {
  // esp 277
  bool is_vehicle_standstill = 1;

  // esp 218
  bool is_vehicle_spd_valid = 2;
  double vehicle_spd = 3;  // unit:m/s
  // esp 208
  bool is_wheel_spd_rr_valid = 4;
  WheelSpeed.WheelSpeedType wheel_direction_rr = 5;
  double wheel_spd_rr = 6;
  bool is_wheel_spd_rl_valid = 7;
  WheelSpeed.WheelSpeedType wheel_direction_rl = 8;
  double wheel_spd_rl = 9;
  bool is_wheel_spd_fr_valid = 10;
  WheelSpeed.WheelSpeedType wheel_direction_fr = 11;
  double wheel_spd_fr = 12;
  bool is_wheel_spd_fl_valid = 13;
  WheelSpeed.WheelSpeedType wheel_direction_fl = 14;
  double wheel_spd_fl = 15;

  // byd esp 222
  bool is_yaw_rate_valid = 16;
  double yaw_rate = 17;
  double yaw_rate_offset = 18;

  // byd esp 223
  bool is_ax_valid = 19;
  double ax = 20;
  double ax_offset = 21;
  bool is_ay_valid = 22;
  double ay = 23;
  double ay_offset = 24;

  // lincoln accel 6b
  double lat_acc = 25;
  double long_acc = 26;
  double vert_acc = 27;

  // lincoln gyro 6c
  double roll_rate = 28;

  // lincoln brakeinfo 74
  double acc_est = 29;

  // lincoln wheelspeed 6a
  double timestamp_sec = 30;
}

message Deceleration {
  // esp 277
  bool is_deceleration_available =
      1;  // for changan to send deceleration value
  bool is_deceleration_active =
      2;  // for changan to send deceleration value

  double deceleration = 3;

  double is_evb_fail = 4;
  double evb_pressure = 5;  // mpa, 0~25.5

  double brake_pressure = 6;
  double brake_pressure_spd = 7;
}

message Brake {
  enum HSAStatusType {
    HSA_INACTIVE = 0;
    HSA_FINDING_GRADIENT = 1;
    HSA_ACTIVE_PRESSED = 2;
    HSA_ACTIVE_RELEASED = 3;
    HSA_FAST_RELEASE = 4;
    HSA_SLOW_RELEASE = 5;
    HSA_FAILED = 6;
    HSA_UNDEFINED = 7;
  }
  enum HSAModeType {
    HSA_OFF = 0;
    HSA_AUTO = 1;
    HSA_MANUAL = 2;
    HSA_MODE_UNDEFINED = 3;
  }
  // ems 255
  bool is_brake_pedal_pressed = 1
     ;  // only manual brake
  // esp 277
  bool is_brake_force_exist =
      2;  // no matter auto mode brake or manual brake
  bool is_brake_over_heat = 3;

  bool is_hand_brake_on = 4;  // hand brake
  double brake_pedal_position = 5;

  // byd vtog 342
  bool is_brake_valid = 6;

  // lincoln brake 61
  double brake_input = 7;
  double brake_cmd = 8;
  double brake_output = 9;
  bool boo_input = 10;
  bool boo_cmd = 11;
  bool boo_output = 12;
  bool watchdog_applying_brakes = 13;
  int32 watchdog_source = 14;
  bool brake_enabled = 15;
  bool driver_override = 16;
  bool driver_activity = 17;
  bool watchdog_fault = 18;
  bool channel_1_fault = 19;
  bool channel_2_fault = 20;
  bool boo_fault = 21;
  bool connector_fault = 22;

  // lincoln brakeinfo 74
  double brake_torque_req = 23;
  HSAStatusType hsa_status = 24;
  double brake_torque_act = 25;
  HSAModeType hsa_mode = 26;
  double wheel_torque_act = 27;

  // lincoln version 7f
  int32 major_version = 28;
  int32 minor_version = 29;
  int32 build_number = 30;
}

// Electrical Parking Brake
message Epb {
  enum PBrakeType {
    PBRAKE_OFF = 0;
    PBRAKE_TRANSITION = 1;
    PBRAKE_ON = 2;
    PBRAKE_FAULT = 3;
  }
  // epb 256
  bool is_epb_error = 1;
  bool is_epb_released = 2;

  // byd epb 218
  int32 epb_status = 3;

  // lincoln brakeinfo 74
  PBrakeType parking_brake_status = 4;
}

message Gas {
  // ems 255
  bool is_gas_pedal_error = 1;
  // ems 26a
  bool is_gas_pedal_pressed_more = 2;  // more than auto mode gas torq
  double gas_pedal_position = 3;  // manual gas
  // byd vtog 342
  bool is_gas_valid = 4;

  // lincoln throttle 63
  double throttle_input = 5;
  double throttle_cmd = 6;
  double throttle_output = 7;
  int32 watchdog_source = 8;
  bool throttle_enabled = 9;
  bool driver_override = 10;
  bool driver_activity = 11;
  bool watchdog_fault = 12;
  bool channel_1_fault = 13;
  bool channel_2_fault = 14;
  bool connector_fault = 15;

  // lincoln throttleinfo 75
  double accelerator_pedal = 16;
  double accelerator_pedal_rate = 17;

  // lincoln version 7f
  int32 major_version = 18;
  int32 minor_version = 19;
  int32 build_number = 20;
}

// Electronic Stability Program
message Esp {
  // esp 277
  bool is_esp_acc_error = 1;  // for changan to control car

  // esp 218
  bool is_esp_on = 2;
  bool is_esp_active = 3;
  bool is_abs_error = 4;
  bool is_abs_active = 5;
  bool is_tcsvdc_fail = 6;

  // lincoln brakeinfo 74
  bool is_abs_enabled = 7;
  bool is_stab_active = 8;
  bool is_stab_enabled = 9;
  bool is_trac_active = 10;
  bool is_trac_enabled = 11;
}

// Engine Manager System
message Ems {
  enum Type {
    STOP = 0;
    CRANK = 1;
    RUNNING = 2;
    INVALID = 3;
  }
  // ems 26a
  bool is_engine_acc_available = 1;  // for changan to control car
  bool is_engine_acc_error = 2;      // for changan to control car

  // ems 265
  Type engine_state = 3;
  double max_engine_torq_percent =
      4;  // for engine torq control, unit:%
  double min_engine_torq_percent =
      5;  // for engine torq control, unit:%
  int32 base_engine_torq_constant =
      6;  // for engine torq control, unit:Nm

  // ems 255
  bool is_engine_speed_error = 7;
  double engine_speed = 8;

  // byd vtog 241
  int32 engine_torque = 9;
  // byd vtog 242
  bool is_over_engine_torque = 10;

  // lincoln mkz throttleinfo 75
  double engine_rpm = 11;
}

message Gear {
  // tcu 268
  bool is_shift_position_valid = 1;
  // chanan: tcu 268
  Chassis.GearPosition gear_state = 2;
  // lincoln gear 67
  bool driver_override = 3;
  Chassis.GearPosition gear_cmd = 4;
  bool canbus_fault = 5;
}

message Safety {
  // ip 270
  bool is_driver_car_door_close = 1;
  // sas 50
  bool is_driver_buckled = 2;

  // byd sws 4a8
  int32 emergency_button = 3;

  // qirui:403
  // when car chassis error, like system fault, or warning report
  bool has_error = 4;
  bool is_motor_invertor_fault = 5;
  bool is_system_fault = 6;
  bool is_power_battery_fault = 7;
  bool is_motor_invertor_over_temperature = 8;
  bool is_small_battery_charge_discharge_fault = 9;
  int32 driving_mode = 10;

  // lincoln misc 69
  bool is_passenger_door_open = 11;
  bool is_rearleft_door_open = 12;
  bool is_rearright_door_open = 13;
  bool is_hood_open = 14;
  bool is_trunk_open = 15;
  bool is_passenger_detected = 16;
  bool is_passenger_airbag_enabled = 17;
  bool is_passenger_buckled = 18;

  // lincoln tirepressure 71
  int32 front_left_tire_press = 19;
  int32 front_right_tire_press = 20;
  int32 rear_left_tire_press = 21;
  int32 rear_right_tire_press = 22;
  Chassis.DrivingMode car_driving_mode = 23;
}

message BasicInfo {
  enum Type {
    OFF = 0;
    ACC = 1;
    ON = 2;
    START = 3;
    INVALID = 4;
  }

  bool is_auto_mode = 1;
  Type power_state = 2;
  bool is_air_bag_deployed = 3;
  double odo_meter = 4;  // odo meter, unit:km
  double drive_range =
      5;  // the meter left when drive continuously, unit:km
  bool is_system_error = 6;
  bool is_human_interrupt = 7;  // human interrupt

  // lincoln misc 69
  bool acc_on_button = 8;  // acc on button pressed
  bool acc_off_button = 9;
  bool acc_res_button = 10;
  bool acc_cancel_button = 11;
  bool acc_on_off_button = 12;
  bool acc_res_cancel_button = 13;
  bool acc_inc_spd_button = 14;
  bool acc_dec_spd_button = 15;
  bool acc_inc_gap_button = 16;
  bool acc_dec_gap_button = 17;
  bool lka_button = 18;
  bool canbus_fault = 19;

  // lincoln gps 6d
  double latitude = 20;
  double longitude = 21;
  bool gps_valid = 22;

  // lincoln gps 6e
  int32 year = 23;
  int32 month = 24;
  int32 day = 25;
  int32 hours = 26;
  int32 minutes = 27;
  int32 seconds = 28;
  double compass_direction = 29;
  double pdop = 30;
  bool is_gps_fault = 31;
  bool is_inferred = 32;

  // lincoln gps 6f
  double altitude = 33;
  double heading = 34;
  double hdop = 35;
  double vdop = 36;
  GpsQuality quality = 37;
  int32 num_satellites = 38;
  double gps_speed = 39;
}

// Gem vehicle starts from here
// TODO(QiL) : Re-factor needed here

message Global_rpt_6a {
  // Report Message
  enum Pacmod_statusType {
    PACMOD_STATUS_CONTROL_DISABLED = 0;
    PACMOD_STATUS_CONTROL_ENABLED = 1;
  }
  enum Override_statusType {
    OVERRIDE_STATUS_NOT_OVERRIDDEN = 0;
    OVERRIDE_STATUS_OVERRIDDEN = 1;
  }
  enum Brk_can_timeoutType {
    BRK_CAN_TIMEOUT_NO_ACTIVE_CAN_TIMEOUT = 0;
    BRK_CAN_TIMEOUT_ACTIVE_CAN_TIMEOUT = 1;
  }
  // [] [0|1]
  Pacmod_statusType pacmod_status = 1;
  // [] [0|1]
  Override_statusType override_status = 2;
  // [] [0|1]
  bool veh_can_timeout = 3;
  // [] [0|1]
  bool str_can_timeout = 4;
  // [] [0|1]
  Brk_can_timeoutType brk_can_timeout = 5;
  // [] [0|1]
  bool usr_can_timeout = 6;
  // [] [0|65535]
  int32 usr_can_read_errors = 7;
}

message Brake_cmd_6b {
  // Report Message
  // [%] [0|1]
  double brake_cmd = 1;
}

message Brake_rpt_6c {
  // Report Message
  enum Brake_on_offType {
    BRAKE_ON_OFF_OFF = 0;
    BRAKE_ON_OFF_ON = 1;
  }
  // [%] [0|1]
  double manual_input = 1;
  // [%] [0|1]
  double commanded_value = 2;
  // [%] [0|1]
  double output_value = 3;
  // [] [0|1]
  Brake_on_offType brake_on_off = 4;
}

message Steering_cmd_6d {
  // Report Message
  // [radians] [-2147483.648|2147483.647]
  double position_value = 1;
  // [rad/s] [0|65.535]
  double speed_limit = 2;
}

message Steering_rpt_1_6e {
  // Report Message
  // [rad/s] [-32.768|32.767]
  double manual_input = 1;
  // [rad/s] [-32.768|32.767]
  double commanded_value = 2;
  // [rad/s] [-32.768|32.767]
  double output_value = 3;
}

message Wheel_speed_rpt_7a {
  // Report Message
  // [rad/s] [-32768|32767]
  int32 wheel_spd_rear_right = 1;
  // [rad/s] [-32768|32767]
  int32 wheel_spd_rear_left = 2;
  // [rad/s] [-32768|32767]
  int32 wheel_spd_front_right = 3;
  // [rad/s] [-32768|32767]
  int32 wheel_spd_front_left = 4;
}

message Date_time_rpt_83 {
  // Report Message
  // [sec] [0|60]
  int32 time_second = 1;
  // [min] [0|60]
  int32 time_minute = 2;
  // [hr] [0|23]
  int32 time_hour = 3;
  // [dy] [1|31]
  int32 date_day = 4;
  // [mon] [1|12]
  int32 date_month = 5;
  // [yr] [2000|2255]
  int32 date_year = 6;
}

message Brake_motor_rpt_1_70 {
  // Report Message
  // [amps] [0|4294967.295]
  double motor_current = 1;
  // [radians] [-2147483.648|2147483.647]
  double shaft_position = 2;
}

message Headlight_rpt_77 {
  // Report Message
  enum Output_valueType {
    OUTPUT_VALUE_HEADLIGHTS_OFF = 0;
    OUTPUT_VALUE_LOW_BEAMS = 1;
    OUTPUT_VALUE_HIGH_BEAMS = 2;
  }
  enum Manual_inputType {
    MANUAL_INPUT_HEADLIGHTS_OFF = 0;
    MANUAL_INPUT_LOW_BEAMS = 1;
    MANUAL_INPUT_HIGH_BEAMS = 2;
  }
  enum Commanded_valueType {
    COMMANDED_VALUE_HEADLIGHTS_OFF = 0;
    COMMANDED_VALUE_LOW_BEAMS = 1;
    COMMANDED_VALUE_HIGH_BEAMS = 2;
  }
  // [] [0|2]
  Output_valueType output_value = 1;
  // [] [0|2]
  Manual_inputType manual_input = 2;
  // [] [0|2]
  Commanded_valueType commanded_value = 3;
}

message Accel_rpt_68 {
  // Report Message
  // [%] [0|1]
  double manual_input = 1;
  // [%] [0|1]
  double commanded_value = 2;
  // [%] [0|1]
  double output_value = 3;
}

message Steering_motor_rpt_3_75 {
  // Report Message
  // [N-m] [-2147483.648|2147483.647]
  double torque_output = 1;
  // [N-m] [-2147483.648|2147483.647]
  double torque_input = 2;
}

message Turn_cmd_63 {
  // Report Message
  enum Turn_signal_cmdType {
    TURN_SIGNAL_CMD_RIGHT = 0;
    TURN_SIGNAL_CMD_NONE = 1;
    TURN_SIGNAL_CMD_LEFT = 2;
    TURN_SIGNAL_CMD_HAZARD = 3;
  }
  // [] [0|3]
  Turn_signal_cmdType turn_signal_cmd = 1;
}

message Turn_rpt_64 {
  // Report Message
  enum Manual_inputType {
    MANUAL_INPUT_RIGHT = 0;
    MANUAL_INPUT_NONE = 1;
    MANUAL_INPUT_LEFT = 2;
    MANUAL_INPUT_HAZARD = 3;
  }
  enum Commanded_valueType {
    COMMANDED_VALUE_RIGHT = 0;
    COMMANDED_VALUE_NONE = 1;
    COMMANDED_VALUE_LEFT = 2;
    COMMANDED_VALUE_HAZARD = 3;
  }
  enum Output_valueType {
    OUTPUT_VALUE_RIGHT = 0;
    OUTPUT_VALUE_NONE = 1;
    OUTPUT_VALUE_LEFT = 2;
    OUTPUT_VALUE_HAZARD = 3;
  }
  // [] [0|3]
  Manual_inputType manual_input = 1;
  // [] [0|3]
  Commanded_valueType commanded_value = 2;
  // [] [0|3]
  Output_valueType output_value = 3;
}

message Shift_cmd_65 {
  // Report Message
  enum Shift_cmdType {
    SHIFT_CMD_PARK = 0;
    SHIFT_CMD_REVERSE = 1;
    SHIFT_CMD_NEUTRAL = 2;
    SHIFT_CMD_FORWARD = 3;
    SHIFT_CMD_LOW = 4;
  }
  // FORWARD_is_also_LOW_on_vehicles_with_LOW/HIGH,_PARK_and_HIGH_only_available_on_certain_Vehicles
  // [] [0|4]
  Shift_cmdType shift_cmd = 1;
}

message Shift_rpt_66 {
  // Report Message
  enum Manual_inputType {
    MANUAL_INPUT_PARK = 0;
    MANUAL_INPUT_REVERSE = 1;
    MANUAL_INPUT_NEUTRAL = 2;
    MANUAL_INPUT_FORWARD = 3;
    MANUAL_INPUT_HIGH = 4;
  }
  enum Commanded_valueType {
    COMMANDED_VALUE_PARK = 0;
    COMMANDED_VALUE_REVERSE = 1;
    COMMANDED_VALUE_NEUTRAL = 2;
    COMMANDED_VALUE_FORWARD = 3;
    COMMANDED_VALUE_HIGH = 4;
  }
  enum Output_valueType {
    OUTPUT_VALUE_PARK = 0;
    OUTPUT_VALUE_REVERSE = 1;
    OUTPUT_VALUE_NEUTRAL = 2;
    OUTPUT_VALUE_FORWARD = 3;
    OUTPUT_VALUE_HIGH = 4;
  }
  // [] [0|4]
  Manual_inputType manual_input = 1;
  // [] [0|4]
  Commanded_valueType commanded_value = 2;
  // [] [0|4]
  Output_valueType output_value = 3;
}

message Accel_cmd_67 {
  // Report Message
  // [%] [0|1]
  double accel_cmd = 1;
}

message Lat_lon_heading_rpt_82 {
  // Report Message
  // [deg] [-327.68|327.67]
  double heading = 1;
  // [sec] [-128|127]
  int32 longitude_seconds = 2;
  // [min] [-128|127]
  int32 longitude_minutes = 3;
  // [deg] [-128|127]
  int32 longitude_degrees = 4;
  // [sec] [-128|127]
  int32 latitude_seconds = 5;
  // [min] [-128|127]
  int32 latitude_minutes = 6;
  // [deg] [-128|127]
  int32 latitude_degrees = 7;
}

message Global_cmd_69 {
  // Report Message
  enum Pacmod_enableType {
    PACMOD_ENABLE_CONTROL_DISABLED = 0;
    PACMOD_ENABLE_CONTROL_ENABLED = 1;
  }
  enum Clear_overrideType {
    CLEAR_OVERRIDE_DON_T_CLEAR_ACTIVE_OVERRIDES = 0;
    CLEAR_OVERRIDE_CLEAR_ACTIVE_OVERRIDES = 1;
  }
  enum Ignore_overrideType {
    IGNORE_OVERRIDE_DON_T_IGNORE_USER_OVERRIDES = 0;
    IGNORE_OVERRIDE_IGNORE_USER_OVERRIDES = 1;
  }
  // [] [0|1]
  Pacmod_enableType pacmod_enable = 1;
  // [] [0|1]
  Clear_overrideType clear_override = 2;
  // [] [0|1]
  Ignore_overrideType ignore_override = 3;
}

message Parking_brake_status_rpt_80 {
  // Report Message
  enum Parking_brake_enabledType {
    PARKING_BRAKE_ENABLED_OFF = 0;
    PARKING_BRAKE_ENABLED_ON = 1;
  }
  // [] [0|1]
  Parking_brake_enabledType parking_brake_enabled = 1;
}

message Yaw_rate_rpt_81 {
  // Report Message
  // [rad/s] [-327.68|327.67]
  double yaw_rate = 1;
}

message Horn_rpt_79 {
  // Report Message
  enum Output_valueType {
    OUTPUT_VALUE_OFF = 0;
    OUTPUT_VALUE_ON = 1;
  }
  enum Commanded_valueType {
    COMMANDED_VALUE_OFF = 0;
    COMMANDED_VALUE_ON = 1;
  }
  enum Manual_inputType {
    MANUAL_INPUT_OFF = 0;
    MANUAL_INPUT_ON = 1;
  }
  // [] [0|1]
  Output_valueType output_value = 1;
  // [] [0|1]
  Commanded_valueType commanded_value = 2;
  // [] [0|1]
  Manual_inputType manual_input = 3;
}

message Horn_cmd_78 {
  // Report Message
  enum Horn_cmdType {
    HORN_CMD_OFF = 0;
    HORN_CMD_ON = 1;
  }
  // [] [0|1]
  Horn_cmdType horn_cmd = 1;
}

message Wiper_rpt_91 {
  // Report Message
  enum Output_valueType {
    OUTPUT_VALUE_WIPERS_OFF = 0;
    OUTPUT_VALUE_INTERMITTENT_1 = 1;
    OUTPUT_VALUE_INTERMITTENT_2 = 2;
    OUTPUT_VALUE_INTERMITTENT_3 = 3;
    OUTPUT_VALUE_INTERMITTENT_4 = 4;
    OUTPUT_VALUE_INTERMITTENT_5 = 5;
    OUTPUT_VALUE_LOW = 6;
    OUTPUT_VALUE_HIGH = 7;
  }
  enum Commanded_valueType {
    COMMANDED_VALUE_WIPERS_OFF = 0;
    COMMANDED_VALUE_INTERMITTENT_1 = 1;
    COMMANDED_VALUE_INTERMITTENT_2 = 2;
    COMMANDED_VALUE_INTERMITTENT_3 = 3;
    COMMANDED_VALUE_INTERMITTENT_4 = 4;
    COMMANDED_VALUE_INTERMITTENT_5 = 5;
    COMMANDED_VALUE_LOW = 6;
    COMMANDED_VALUE_HIGH = 7;
  }
  enum Manual_inputType {
    MANUAL_INPUT_WIPERS_OFF = 0;
    MANUAL_INPUT_INTERMITTENT_1 = 1;
    MANUAL_INPUT_INTERMITTENT_2 = 2;
    MANUAL_INPUT_INTERMITTENT_3 = 3;
    MANUAL_INPUT_INTERMITTENT_4 = 4;
    MANUAL_INPUT_INTERMITTENT_5 = 5;
    MANUAL_INPUT_LOW = 6;
    MANUAL_INPUT_HIGH = 7;
  }
  // [] [0|7]
  Output_valueType output_value = 1;
  // [] [0|7]
  Commanded_valueType commanded_value = 2;
  // [] [0|7]
  Manual_inputType manual_input = 3;
}

message Vehicle_speed_rpt_6f {
  // Report Message
  enum Vehicle_speed_validType {
    VEHICLE_SPEED_VALID_INVALID = 0;
    VEHICLE_SPEED_VALID_VALID = 1;
  }
  // [m/s] [-327.68|327.67]
  double vehicle_speed = 1;
  // [] [0|1]
  Vehicle_speed_validType vehicle_speed_valid = 2;
}

message Headlight_cmd_76 {
  // Report Message
  enum Headlight_cmdType {
    HEADLIGHT_CMD_HEADLIGHTS_OFF = 0;
    HEADLIGHT_CMD_LOW_BEAMS = 1;
    HEADLIGHT_CMD_HIGH_BEAMS = 2;
  }
  // [] [0|2]
  Headlight_cmdType headlight_cmd = 1;
}

message Steering_motor_rpt_2_74 {
  // Report Message
  // [deg C] [-32808|32727]
  int32 encoder_temperature = 1;
  // [deg C] [-32808|32727]
  int32 motor_temperature = 2;
  // [rev/s] [-2147483.648|2147483.647]
  double angular_speed = 3;
}

message Brake_motor_rpt_2_71 {
  // Report Message
  // [deg C] [-32808|32727]
  int32 encoder_temperature = 1;
  // [deg C] [-32808|32727]
  int32 motor_temperature = 2;
  // [rev/s] [0|4294967.295]
  double angular_speed = 3;
}

message Steering_motor_rpt_1_73 {
  // Report Message
  // [amps] [0|4294967.295]
  double motor_current = 1;
  // [amps] [-2147483.648|2147483.647]
  double shaft_position = 2;
}

message Wiper_cmd_90 {
  // Report Message
  enum Wiper_cmdType {
    WIPER_CMD_WIPERS_OFF = 0;
    WIPER_CMD_INTERMITTENT_1 = 1;
    WIPER_CMD_INTERMITTENT_2 = 2;
    WIPER_CMD_INTERMITTENT_3 = 3;
    WIPER_CMD_INTERMITTENT_4 = 4;
    WIPER_CMD_INTERMITTENT_5 = 5;
    WIPER_CMD_LOW = 6;
    WIPER_CMD_HIGH = 7;
  }
  // [] [0|7]
  Wiper_cmdType wiper_cmd = 1;
}

message Brake_motor_rpt_3_72 {
  // Report Message
  // [N-m] [-2147483.648|2147483.647]
  double torque_output = 1;
  // [N-m] [-2147483.648|2147483.647]
  double torque_input = 2;
}

message Gem {
  Global_rpt_6a global_rpt_6a = 1;                // report message
  Brake_cmd_6b brake_cmd_6b = 2;                  // report message
  Brake_rpt_6c brake_rpt_6c = 3;                  // report message
  Steering_cmd_6d steering_cmd_6d = 4;            // report message
  Steering_rpt_1_6e steering_rpt_1_6e = 5;        // report message
  Wheel_speed_rpt_7a wheel_speed_rpt_7a = 6;      // report message
  Date_time_rpt_83 date_time_rpt_83 = 7;          // report message
  Brake_motor_rpt_1_70 brake_motor_rpt_1_70 = 8;  // report message
  Headlight_rpt_77 headlight_rpt_77 = 9;          // report message
  Accel_rpt_68 accel_rpt_68 = 10;                 // report message
  Steering_motor_rpt_3_75 steering_motor_rpt_3_75 =
      11;                                   // report message
  Turn_cmd_63 turn_cmd_63 = 12;    // report message
  Turn_rpt_64 turn_rpt_64 = 13;    // report message
  Shift_cmd_65 shift_cmd_65 = 14;  // report message
  Shift_rpt_66 shift_rpt_66 = 15;  // report message
  Accel_cmd_67 accel_cmd_67 = 16;  // report message
  Lat_lon_heading_rpt_82 lat_lon_heading_rpt_82 =
      17;                                     // report message
  Global_cmd_69 global_cmd_69 = 18;  // report message
  Parking_brake_status_rpt_80 parking_brake_status_rpt_80 =
      19;                                                   // report message
  Yaw_rate_rpt_81 yaw_rate_rpt_81 = 20;            // report message
  Horn_rpt_79 horn_rpt_79 = 21;                    // report message
  Horn_cmd_78 horn_cmd_78 = 22;                    // report message
  Wiper_rpt_91 wiper_rpt_91 = 23;                  // report message
  Vehicle_speed_rpt_6f vehicle_speed_rpt_6f = 24;  // report message
  Headlight_cmd_76 headlight_cmd_76 = 25;          // report message
  Steering_motor_rpt_2_74 steering_motor_rpt_2_74 =
      26;                                                   // report message
  Brake_motor_rpt_2_71 brake_motor_rpt_2_71 = 27;  // report message
  Steering_motor_rpt_1_73 steering_motor_rpt_1_73 =
      28;                                                   // report message
  Wiper_cmd_90 wiper_cmd_90 = 29;                  // report message
  Brake_motor_rpt_3_72 brake_motor_rpt_3_72 = 30;  // report message
}
