syntax = "proto3";

package openbot.planning_internal;

import "openbot/common_msgs/basic_msgs/geometry.proto";
import "openbot/common_msgs/basic_msgs/header.proto";
import "openbot/common_msgs/basic_msgs/pnc_point.proto";
import "openbot/common_msgs/chassis_msgs/chassis.proto";
import "openbot/common_msgs/dreamview_msgs/chart.proto";
import "openbot/common_msgs/localization_msgs/localization.proto";
import "openbot/common_msgs/perception_msgs/traffic_light_detection.proto";
import "openbot/common_msgs/planning_msgs/decision.proto";
import "openbot/common_msgs/planning_msgs/navigation.proto";
import "openbot/common_msgs/planning_msgs/sl_boundary.proto";
import "openbot/common_msgs/routing_msgs/routing.proto";
import "openbot/common_msgs/routing_msgs/geometry.proto";

message Debug {
  PlanningData planning_data = 2;
}

message SpeedPlan {
  string name = 1;
  repeated openbot.common.SpeedPoint speed_point = 2;
}

message StGraphBoundaryDebug {
  enum StBoundaryType {
    ST_BOUNDARY_TYPE_UNKNOWN = 0;
    ST_BOUNDARY_TYPE_STOP = 1;
    ST_BOUNDARY_TYPE_FOLLOW = 2;
    ST_BOUNDARY_TYPE_YIELD = 3;
    ST_BOUNDARY_TYPE_OVERTAKE = 4;
    ST_BOUNDARY_TYPE_KEEP_CLEAR = 5;
    ST_BOUNDARY_TYPE_DRIVABLE_REGION = 6;
  }
  string name = 1;
  repeated openbot.common.SpeedPoint point = 2;
  StBoundaryType type = 3;
}

message SLFrameDebug {
  string name = 1;
  repeated double sampled_s = 2;
  repeated double static_obstacle_lower_bound = 3;
  repeated double dynamic_obstacle_lower_bound = 4;
  repeated double static_obstacle_upper_bound = 5;
  repeated double dynamic_obstacle_upper_bound = 6;
  repeated double map_lower_bound = 7;
  repeated double map_upper_bound = 8;
  repeated openbot.common.SLPoint sl_path = 9;
  repeated double aggregated_boundary_s = 10;
  repeated double aggregated_boundary_low = 11;
  repeated double aggregated_boundary_high = 12;
}

message STGraphDebug {
  message STGraphSpeedConstraint {
    repeated double t = 1;
    repeated double lower_bound = 2;
    repeated double upper_bound = 3;
  }
  message STGraphKernelCuiseRef {
    repeated double t = 1;
    repeated double cruise_line_s = 2;
  }
  message STGraphKernelFollowRef {
    repeated double t = 1;
    repeated double follow_line_s = 2;
  }

  string name = 1;
  repeated StGraphBoundaryDebug boundary = 2;
  repeated openbot.common.SpeedPoint speed_limit = 3;
  repeated openbot.common.SpeedPoint speed_profile = 4;
  STGraphSpeedConstraint speed_constraint = 5;
  STGraphKernelCuiseRef kernel_cruise_ref = 6;
  STGraphKernelFollowRef kernel_follow_ref = 7;
}

message SignalLightDebug {
  message SignalDebug {
    string light_id = 1;
    openbot.perception.TrafficLight.Color color = 2;
    double light_stop_s = 3;
    double adc_stop_deceleration = 4;
    bool is_stop_wall_created = 5;
  }
  double adc_speed = 1;
  double adc_front_s = 2;
  repeated SignalDebug signal = 3;
}

message DecisionTag {
  string decider_tag = 1;
  openbot.planning.ObjectDecisionType decision = 2;
}

message ObstacleDebug {
  string id = 1;
  openbot.planning.SLBoundary sl_boundary = 2;
  repeated DecisionTag decision_tag = 3;
  repeated double vertices_x_coords = 4;
  repeated double vertices_y_coords = 5;
}

message ReferenceLineDebug {
  string id = 1;
  double length = 2;
  double cost = 3;
  bool is_change_lane_path = 4;
  bool is_drivable = 5;
  bool is_protected = 6;
  bool is_offroad = 7;
  double minimum_boundary = 8;
  double average_kappa = 9;
  double average_dkappa = 10;
  double kappa_rms = 11;
  double dkappa_rms = 12;
  double kappa_max_abs = 13;
  double dkappa_max_abs = 14;
  double average_offset = 15;
}

message SampleLayerDebug {
  repeated openbot.common.SLPoint sl_point = 1;
}

message DpPolyGraphDebug {
  repeated SampleLayerDebug sample_layer = 1;
  repeated openbot.common.SLPoint min_cost_point = 2;
}

message ScenarioDebug {
  // "scenario_type" is deprecated because scenario is designed as plugin and 
  // "scenario_plugin_type" will be used instead.
  int32 scenario_type = 1 [deprecated=true];
  // "stage_type" is deprecated because scenario is designed as plugin and 
  // "stage_plugin_type" will be used instead.
  int32 stage_type = 2 [deprecated=true];
  string msg = 3;
  string scenario_plugin_type = 4;
  string stage_plugin_type = 5;
}

message Trajectories {
  repeated openbot.common.Trajectory trajectory = 1;
}

message OpenSpaceDebug {
  openbot.planning_internal.Trajectories trajectories = 1;
  openbot.common.VehicleMotion warm_start_trajectory = 2;
  openbot.common.VehicleMotion smoothed_trajectory = 3;
  repeated double warm_start_dual_lambda = 4;
  repeated double warm_start_dual_miu = 5;
  repeated double optimized_dual_lambda = 6;
  repeated double optimized_dual_miu = 7;
  repeated double xy_boundary = 8;
  repeated openbot.planning_internal.ObstacleDebug obstacles = 9;
  openbot.common.TrajectoryPoint roi_shift_point = 10;
  openbot.common.TrajectoryPoint end_point = 11;
  openbot.planning_internal.Trajectories partitioned_trajectories = 12;
  openbot.planning_internal.Trajectories chosen_trajectory = 13;
  bool is_fallback_trajectory = 14;
  openbot.planning_internal.Trajectories fallback_trajectory = 15;
  openbot.common.TrajectoryPoint trajectory_stitching_point = 16;
  openbot.common.TrajectoryPoint future_collision_point = 17;
  double time_latency = 18;  // ms
  openbot.common.PointENU origin_point = 19;  // meter
  double origin_heading_rad = 20;
}

message SmootherDebug {
  enum SmootherType {
    SMOOTHER_NONE = 0;
    SMOOTHER_CLOSE_STOP = 1;
  }
  bool is_smoothed = 1;

  SmootherType type = 2;
  string reason = 3;
}

message PullOverDebug {
  openbot.common.PointENU position = 1;
  double theta = 2;
  double length_front = 3;
  double length_back = 4;
  double width_left = 5;
  double width_right = 6;
}

// next ID: 30
message PlanningData {
  // input
  openbot.localization.LocalizationEstimate adc_position = 7;
  openbot.canbus.Chassis chassis = 8;
  openbot.routing.RoutingResponse routing = 9;
  openbot.common.TrajectoryPoint init_point = 10;

  repeated openbot.common.Path path = 6;

  repeated SpeedPlan speed_plan = 13;
  repeated STGraphDebug st_graph = 14;
  repeated SLFrameDebug sl_frame = 15;

  openbot.common.Header prediction_header = 16;
  SignalLightDebug signal_light = 17;

  repeated ObstacleDebug obstacle = 18;
  repeated ReferenceLineDebug reference_line = 19;
  DpPolyGraphDebug dp_poly_graph = 20;
  LatticeStTraining lattice_st_image = 21;
  openbot.relative_map.MapMsg relative_map = 22;
  AutoTuningTrainingData auto_tuning_training_data = 23;
  double front_clear_distance = 24;
  repeated openbot.dreamview.Chart chart = 25;
  ScenarioDebug scenario = 26;
  OpenSpaceDebug open_space = 27;
  SmootherDebug smoother = 28;
  PullOverDebug pull_over = 29;
  HybridModelDebug hybrid_model = 30;
}

message LatticeStPixel {
  int32 s = 1;
  int32 t = 2;
  uint32 r = 3;
  uint32 g = 4;
  uint32 b = 5;
}

message LatticeStTraining {
  repeated LatticeStPixel pixel = 1;
  double timestamp = 2;
  string annotation = 3;
  uint32 num_s_grids = 4;
  uint32 num_t_grids = 5;
  double s_resolution = 6;
  double t_resolution = 7;
}

message CostComponents {
  repeated double cost_component = 1;
}

message AutoTuningTrainingData {
  CostComponents teacher_component = 1;
  CostComponents student_component = 2;
}

message CloudReferenceLineRequest {
  repeated openbot.routing.LaneSegment lane_segment = 1;
}

message CloudReferenceLineRoutingRequest {
  openbot.routing.RoutingResponse routing = 1;
}

message CloudReferenceLineResponse {
  repeated openbot.common.Path segment = 1;
}

message HybridModelDebug {
  bool using_learning_model_output = 1;
  double learning_model_output_usage_ratio = 2;
  string learning_model_output_fail_reason = 3;
  openbot.common.Path evaluated_path_reference = 4;
}
