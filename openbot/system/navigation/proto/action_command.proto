// Copyright 2024 The OpenRobotic Beginner Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package openbot.navigation;

import "openbot/common/proto/std_msgs.proto";
import "openbot/common/proto/builtin_interfaces.proto";
import "openbot/common/proto/nav_msgs.proto";
import "openbot/common/proto/geometry_msgs.proto"; 

enum Status
{
    SUCCESS = 0;
    FAILURE = 1;
    RUNNING = 2;
    CANCELED = 3;
    REJECT = 4;
    ACCEPT = 5;
}

enum CommandType
{
    CONFIGURE = 0;
    ACTIVATE = 1;
    DEACTIVATE = 2;
    CLEANUP = 3;
    SHUTDOWN = 4;
}

message NavigateToPose
{
    message Request 
    {
        // command_type
        CommandType command_type = 1;

        // path
        common.geometry_msgs.PoseStamped pose = 2;

        // behavior_tree
        string behavior_tree = 3;

        // goal_checker_id
        string goal_checker_id = 4;
    }

    message Response
    {
        Status status = 1;
    }

    // service request
    Request request = 1;

    // service response
    Response response = 2;
}

message NavigateThroughPoses
{
    message Request 
    {
        // command_type
        CommandType command_type = 1;
    }

    message Response
    {
        Status status = 1;
    }

    // service request
    Request request = 1;

    // service response
    Response response = 2;
}

message FollowPath
{
    message Request 
    {
        // command_type
        CommandType command_type = 1;

        // path
        common.nav_msgs.Path path = 2;

        // controller_id
        string controller_id = 3;

        // goal_checker_id
        string goal_checker_id = 4;
    }

    message Response
    {
        Status status = 1;
        double distance_to_goal = 2;
        double speed = 3;
    }

    // service request
    Request request = 1;

    // service response
    Response response = 2;
}

message BackUp
{
    message Request 
    {
        // command_type
        CommandType command_type = 1;

        common.geometry_msgs.Point target = 2;
        double speed = 3;
        common.builtin_interfaces.Duration time_allowance = 4;
    }

    message Response
    {
        Status status = 1;
        double distance_traveled = 2;
    }

    // service request
    Request request = 1;

    // service response
    Response response = 2;
}

message Spin
{
    message Request 
    {
        // command_type
        CommandType command_type = 1;

        // yaw
        double target_yaw = 2;

        common.builtin_interfaces.Duration time_allowance = 3;
    }

    message Response
    {
        Status status = 1;
        double angular_distance_traveled = 2;
    }

    // service request
    Request request = 1;

    // service response
    Response response = 2;
}

message Wait
{
    message Request 
    {
        // command_type
        CommandType command_type = 1;

        // target 
        common.geometry_msgs.Point target = 2;

        double speed = 3;

        common.builtin_interfaces.Duration time_allowance = 4;
    }

    message Response
    {
        Status status = 1;
        double angular_distance_traveled = 2;
    }

    // service request
    Request request = 1;

    // service response
    Response response = 2;
}

