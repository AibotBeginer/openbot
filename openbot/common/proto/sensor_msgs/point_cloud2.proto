// Copyright 2024 The OpenRobotic Beginner Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package openbot.common.proto.sensor_msgs;

import "openbot/common/proto/std_msgs/header.proto";
import "openbot/common/proto/sensor_msgs/point_field.proto";

// This message holds a collection of N-dimensional points, which may
// contain additional information such as normals, intensity, etc. The
// point data is stored as a binary blob, its layout described by the
// contents of the "fields" array.
//
// The point cloud data may be organized 2d (image-like) or 1d (unordered).
// Point clouds organized as 2d images may be produced by camera depth sensors
// such as stereo or time-of-flight.

message PointCloud2
{

    // Time of sensor data acquisition, and the coordinate frame ID (for 3d points).
    std_msgs.Header header = 1;

    // 2D structure of the point cloud. If the cloud is unordered, height is
    // 1 and width is the length of the point cloud.
    uint32 height = 2;
    uint32 width = 3;

    // Describes the channels and their layout in the binary data blob.
    repeated sensor_msgs.PointField fields = 4;

    bool    is_bigendian = 5; // Is this data bigendian?
    uint32  point_step = 6;   // Length of a point in bytes
    uint32  row_step = 7;     // Length of a row in bytes
    repeated uint32 data = 8; // Actual point data, size is (row_step*height)

    bool is_dense = 9;        // True if there are no invalid points
}