// Copyright 2024 The OpenRobotic Beginner Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package openbot.common.proto.sensor_msgs;

import "openbot/common/proto/std_msgs/header.proto";
import "openbot/common/proto/geometry_msgs/vector3.proto";
import "openbot/common/proto/geometry_msgs/quaternion.proto";

// This is a message to hold data from an IMU (Inertial Measurement Unit)
//
// Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
//
// If the covariance of the measurement is known, it should be filled in (if all you know is the
// variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
// A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
// data a covariance will have to be assumed or gotten from some other source
//
// If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an
// orientation estimate), please set element 0 of the associated covariance matrix to -1
// If you are interpreting this message, please check for a value of -1 in the first element of each
// covariance matrix, and disregard the associated estimate.
message Imu
{
    std_msgs.Header header = 1;

    geometry_msgs.Quaternion orientation = 2;
    repeated double orientation_covariance = 3 [packed=true]; // float64[9] orientation_covariance 
                                                              // Row major about x, y, z axes

    geometry_msgs.Vector3 angular_velocity = 4;
    repeated double angular_velocity_covariance = 5 [packed=true];  // float64[9] angular_velocity_covariance  
                                                                    // Row major about x, y, z axes

    geometry_msgs.Vector3 linear_acceleration = 6;
    repeated double linear_acceleration_covariance = 7 [packed=true];  // float64[9] linear_acceleration_covariance 
                                                                        // Row major x, y z
}